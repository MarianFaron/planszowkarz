@import 'mixins';
@import 'colors';
@import 'font-awesome';
@import "~angular-star-rating/assets/scss/star-rating";


// small-mobile device
$small-mobile-breakpoint: 479px;

// mobile device
$mobile-breakpoint: 768px;

// tablet device
$tablet-breakpoint: 992px;

// desktop device
$desktop-breakpoint: 1200px;

// Font dize mixin

@mixin font-size($sizeValue) {
  font-size: ($sizeValue) + px;
  font-size: ($sizeValue/10) + rem;
}

// Breapoint mixin

@mixin respond-to($media) {
  @if $media == small-mobile {
    @media only screen and (max-width: $small-mobile-breakpoint) {
      @content;
    }
  }

  @else if $media == mobile {
    @media only screen and (max-width: ($mobile-breakpoint - 1)) {
      @content;
    }
  }

  @else if $media == tablet {
    @media only screen and (max-width: ($tablet-breakpoint - 1)) {
      @content;
    }
  }

  @else if $media == desktop {
    @media only screen and (max-width: ($desktop-breakpoint - 1)) {
      @content;
    }
  }

  @else if $media == large-desktop {
    @media only screen and (min-width: $desktop-breakpoint) {
      @content;
    }
  }
}

@mixin pet-icon-after($icon, $font-family: 'FontAwesome') {
  &:after {
    content: $icon;
    font-family: $font-family;
    font-weight: 700;
    font-style: normal;
    display: inline-block;
    text-decoration: inherit;
    line-height: 1;
  }
}

@mixin pet-icon-before($icon, $font-family: 'FontAwesome') {
  &:before {
    content: $icon;
    font-family: $font-family;
    font-weight: normal;
    font-style: normal;
    display: block;
    text-decoration: inherit;
    line-height: 1;
  }
}

@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
   -khtml-#{$property}: #{$value};
     -moz-#{$property}: #{$value};
      -ms-#{$property}: #{$value};
       -o-#{$property}: #{$value};
          #{$property}: #{$value};
}

@mixin transition($args...) {
  @if length($args) >= 1 {
    @include css3-prefix('transition', $args);
  }
  @else {
    @include css3-prefix('transition',  "all 0.2s ease-in-out 0s");
  }
}

@mixin placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

@mixin box-shadow($top, $left, $blur, $spread, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $spread $color;
    -moz-box-shadow:inset $top $left $blur $spread $color;
    box-shadow:inset $top $left $blur $spread $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $spread $color;
    -moz-box-shadow: $top $left $blur $spread $color;
    box-shadow: $top $left $blur $spread $color;
  }
}

@mixin linear-gradient-b($args...) {
  background-image: -o-linear-gradient($args);
  background-image: -moz-linear-gradient($args);
  background-image: -webkit-linear-gradient($args);
  background-image: linear-gradient($args);
}

@mixin filter($filter-type, $filter-amount) {
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}

@mixin border-radius($radius) {
  @include css3-prefix('border-radius', $radius);
}

@mixin opacity($opacity) {
  $opacityMultiplied: ($opacity * 100);

  filter:         alpha(opacity=$opacityMultiplied);
  -ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")";
  @include css3-prefix('opacity', $opacity);
}

@mixin transform($params) {
  @include css3-prefix('transform', $params);
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  @include css3-prefix('animation', $str);
}

// FLEX MIXINS

@mixin display-flex {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

@mixin display-inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}


@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}


@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}

@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {

	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}


$pl-black: #000;

$pl-white: #FFF;

$pl-dark-gray: #333;

$pl-dark-gray2: #74777b;

$pl-dark-gray3: #ccc;

$pl-mid-gray: #444;

$pl-mid-gray2: #a9a9a9;

$pl-light-gray: #e7e7e7;

$pl-light-gray2: #ddd;

$pl-light-gray3: #f8f8f8;

$pl-light-gray4: #F5F5F5;

$pl-gray: #d8d8d8;

$pl-gray2: #b6b6b6;

$pl-orange: #f98d1a;

$pl-red: #FF0000;

$pl-yellow: #FFC100;

$pl-yellow2: #FFFF00;

$pl-green: #3c763d;

$pl-green2: #678954;








body {
  font-family: 'Open Sans', sans-serif;
  color: $pl-dark-gray;
  background: #f5f5f5;
}

a {
  @include transition(all 150ms linear);
}

h1, h2, h3, h4, h5, h6 {
  color: $pl-dark-gray;
}

h3 {
  @include font-size(16);

}

h3.section-header {
  @include font-size(23);

  font-weight: 28px;
  font-weight: 700;
  color: $pl-dark-gray;
  margin: 0;
}

.label-value{
  @include font-size(14);
}

.center {
  text-align: center;
}

:focus {
  outline: none !important;
}

.form-group label {
  width: 100%;
}

input,
select,
input.form-control,
textarea.form-control {
  width: 100%;
  border-radius: 0!important;
  @include box-shadow(0,0,0,0,$pl-white,false);
}

input,
select {
  height: 40px!important;
  line-height: 40px!important;
}

textarea.form-control {
  min-height: 180px;
}

.form-control {
  margin-bottom: 10px;

  &:focus {
    outline: none !important;
    border: 1px solid $pl-orange;
    @include box-shadow(0,0,0,0,$pl-white,false);
  }
}

textarea:focus {
  border: 1px solid $pl-orange;
}

.loading {
  margin-top: 40px;
  max-width: 30px;
}

.custom-button {
  margin-top: 15px;
  color: $pl-white;
  font-weight: 500;
  background: $pl-orange;
  border: none;
  min-width: 100px;
  height: 32px;
  @include transition(all ease-in 0.15s);

  @include respond-to(desktop) {
    @include font-size(12);
  }

  @include respond-to(mobile) {
    padding: 6px;
    display: block;
    margin: 10px auto;
  }
}

.custom-button:hover,
.custom-button:focus,
.custom-button:active {
  color: $pl-white;
  background: $pl-orange;
  border: none;
}

.btn-color{
  color: $pl-black;
  background-color: $pl-light-gray;
  margin-top: 15px;
  font-weight: 500;
  border: none;
  min-width: 100px;

  &:hover {
    background-color: $pl-gray;
  }
}

.main-hr {
  border: 0;
  height: 1px;
  background: $pl-orange;
  margin-left: 0;
  width: 60px;
}

hr {
  margin-bottom: 10px;
}

.inner{
    background: $pl-white;
    box-shadow: 2px 2px 1px $pl-gray;

    a:hover {
      text-decoration: none;
    }
}

/* DATEPICKER */

.mydp .header {
    background: $pl-orange !important;
    color: $pl-white !important
}

.mydp .headerbtncell,
.mydp .headerbtn, .mydp .headerlabelbtn, .mydp .yearchangebtn {
  background: $pl-orange !important;
  color: $pl-white !important;
}

.mydp .selectedday .datevalue, .mydp .selectedmonth .monthvalue, .mydp .selectedyear .yearvalue {
  color: $pl-white !important;
}

.mydp .caltable, .mydp .daycell, .mydp .monthcell, .mydp .monthtable, .mydp .weekdaytitle, .mydp .yearcell, .mydp .yeartable {
  color: $pl-dark-gray !important;
}

.checkbox label,
.radio label {
  padding-left: 0;
}

.checkbox label:after,
.radio label:after {
    content: '';
    display: table;
    clear: both;
}

.checkbox .cr,
.radio .cr {
    background: $pl-white;
    position: relative;
    display: inline-block;
    border: 1px solid $pl-mid-gray2;
    border-radius: .25em;
    width: 1.3em;
    height: 1.3em;
    float: left;
    margin-right: .5em;
}

.radio .cr {
    border-radius: 50%;
}

.checkbox .cr .cr-icon,
.radio .cr .cr-icon {
    position: absolute;
    font-size: .8em;
    line-height: 0;
    top: 50%;
    left: 10%;
}

.radio .cr .cr-icon {
    margin-left: 0.04em;
}

.checkbox label input[type="checkbox"],
.radio label input[type="radio"] {
    display: none;
}

.checkbox label input[type="checkbox"] + .cr > .cr-icon,
.radio label input[type="radio"] + .cr > .cr-icon {
    @include opacity(0);
}

.checkbox label input[type="checkbox"]:checked + .cr > .cr-icon,
.radio label input[type="radio"]:checked + .cr > .cr-icon {
    @include opacity(1);
}

.checkbox label input[type="checkbox"]:disabled + .cr,
.radio label input[type="radio"]:disabled + .cr {
    @include opacity(0.5);
}

.next-arrow {
  right: -30px;

  @include respond-to(tablet) {
    right: -10px;
  }
}

.prev-arrow {
  left: -30px;

  @include respond-to(mobile) {
    left: -10px;
  }
}

.next-arrow, .prev-arrow {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  width: 30px;
  color: $pl-orange;
  line-height: 55px;
  text-align: center;
  cursor: pointer;
  z-index: 999;

  @include font-size(48);
}

/* Custom checkbox */
.custom-checkbox input[type="checkbox"]{
  display: none;
}

.custom-checkbox input[type="checkbox"] + label{
  display: block;
  position: relative;
  padding-left: 35px;
  margin-bottom: 20px;
  cursor: pointer;
}

.custom-checkbox input[type="checkbox"] + label:last-child{
  margin-bottom: 0;
}

.custom-checkbox input[type="checkbox"] + label:before{
  content: '';
  display: block;
  width: 20px;
  height: 20px;
  border: 2px solid #f98d1a;
  position: absolute;
  left: 0;
  top: 0;
  @include opacity(0.6);
  @include transition(all .12s, border-color .08s);

}

.custom-checkbox input[type="checkbox"]:checked + label:before{
  width: 10px;
  top: -5px;
  left: 5px;
  border-radius: 0;
  @include opacity(1);
  border-top-color: transparent;
  border-left-color: transparent;
  @include transform(rotate(45deg))

}


// Custom scrollbar

#custom-scrollbar::-webkit-scrollbar-track{
  -webkit-box-shadow: inset 0 0 6px rgba($pl-black, 0.3);
  background-color: $pl-light-gray4;
}

#custom-scrollbar::-webkit-scrollbar{
  width: 10px;
  background-color: $pl-light-gray4;
}

#custom-scrollbar::-webkit-scrollbar-thumb{
  background-color: #F90;
  background-image: -webkit-linear-gradient(45deg, rgba($pl-white, .2) 25%,
                        transparent 25%,
                        transparent 50%,
                        rgba($pl-white, .2) 50%,
                        rgba($pl-white, .2) 75%,
                        transparent 75%,
                        transparent)
}

// Pagination

.pagination {
  box-shadow: 2px 2px 1px $pl-gray;
}

.pagination a,
.pagination > li > a,
.pagination > li > span {
  color: $pl-dark-gray;
  cursor: pointer;
}

.pagination .active a,
.pagination .active a:hover {
  background: $pl-orange;
  color: $pl-white;
  border-top: 1px solid $pl-orange;
  border-bottom: 1px solid $pl-orange;
  border-left: none;
  border-right: none;
  cursor: pointer;
}
